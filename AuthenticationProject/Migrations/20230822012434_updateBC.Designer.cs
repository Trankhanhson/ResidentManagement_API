// <auto-generated />
using System;
using AuthenticationProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationProject.Migrations
{
    [DbContext(typeof(AuthenticationDBContext))]
    [Migration("20230822012434_updateBC")]
    partial class updateBC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthenticationProject.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AuthenticationProject.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commune")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("ApartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("Space")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("AuthenticationProject.Models.BuildingCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("AddressId");

                    b.ToTable("BuildingCategories");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Customer", b =>
                {
                    b.Property<long?>("Makhachhang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Makhachhang"));

                    b.Property<string>("Cccd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hinhanh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ngaycap")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sodienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenkhachhang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Makhachhang");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PermissionId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AuthenticationProject.Models.PermissionRole", b =>
                {
                    b.Property<long?>("PermissionRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("PermissionRoleId"));

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionRoleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRoles");
                });

            modelBuilder.Entity("AuthenticationProject.Models.PermissionUser", b =>
                {
                    b.Property<long?>("PermissionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("PermissionUserId"));

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionUsers");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResidentId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cccd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResidentId");

                    b.ToTable("Resident");
                });

            modelBuilder.Entity("AuthenticationProject.Models.ResidentApartment", b =>
                {
                    b.Property<int>("ResidentApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResidentApartmentId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("int");

                    b.HasKey("ResidentApartmentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentApartment");
                });

            modelBuilder.Entity("AuthenticationProject.Models.UrbanArea", b =>
                {
                    b.Property<int>("UrbanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrbanId"));

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.Property<string>("UrbanName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UrbanId");

                    b.ToTable("UrbanAreas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d7f1c376-7fea-4c67-a054-066c1ffefb53",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_Create",
                            NormalizedName = "Apartment_Create"
                        },
                        new
                        {
                            Id = "70344895-5be0-44d8-95d2-153c4d44fcc2",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_Update",
                            NormalizedName = "Apartment_Update"
                        },
                        new
                        {
                            Id = "48ed395a-f7ca-4cd4-a23a-d1b6862d4543",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_Delete",
                            NormalizedName = "Apartment_Delete"
                        },
                        new
                        {
                            Id = "071971c9-0f7e-46f7-84c4-1da4bb4dbd91",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_DeleteMultiple",
                            NormalizedName = "Apartment_DeleteMultiple"
                        },
                        new
                        {
                            Id = "a6a270c1-74dd-4a73-a201-a0596aed41b8",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_GetAll",
                            NormalizedName = "Apartment_GetAll"
                        },
                        new
                        {
                            Id = "04f1ba2f-4389-4b2c-bf90-c6da74e48c88",
                            ConcurrencyStamp = "4",
                            Name = "Apartment_GetById",
                            NormalizedName = "Apartment_GetById"
                        },
                        new
                        {
                            Id = "da2110fc-da2b-49eb-81e6-503ba610757d",
                            ConcurrencyStamp = "4",
                            Name = "User_Create",
                            NormalizedName = "User_Create"
                        },
                        new
                        {
                            Id = "4c61f6d7-a9fa-43c7-92a2-5075ed5e87f6",
                            ConcurrencyStamp = "4",
                            Name = "User_Update",
                            NormalizedName = "User_Update"
                        },
                        new
                        {
                            Id = "b0c0a3ee-b7a2-4bba-a630-76f3d6ecffbc",
                            ConcurrencyStamp = "4",
                            Name = "User_Delete",
                            NormalizedName = "User_Delete"
                        },
                        new
                        {
                            Id = "9bd08204-4bef-47fd-9ed0-77250fad0846",
                            ConcurrencyStamp = "4",
                            Name = "User_DeleteMultiple",
                            NormalizedName = "User_DeleteMultiple"
                        },
                        new
                        {
                            Id = "3395a21b-3fc6-4c1e-9f09-d244adc0e551",
                            ConcurrencyStamp = "4",
                            Name = "User_GetAll",
                            NormalizedName = "User_GetAll"
                        },
                        new
                        {
                            Id = "be147070-4bb8-45da-8b15-bbffafa50132",
                            ConcurrencyStamp = "4",
                            Name = "User_GetById",
                            NormalizedName = "User_GetById"
                        },
                        new
                        {
                            Id = "c978a04a-db72-4d09-9ad3-d196c5710ff1",
                            ConcurrencyStamp = "4",
                            Name = "Resident_Create",
                            NormalizedName = "Resident_Create"
                        },
                        new
                        {
                            Id = "4c798523-7c4e-414f-9f91-680ce627089f",
                            ConcurrencyStamp = "4",
                            Name = "Resident_Update",
                            NormalizedName = "Resident_Update"
                        },
                        new
                        {
                            Id = "80a6dfef-943c-42fb-a4f1-3443cfd0a59a",
                            ConcurrencyStamp = "4",
                            Name = "Resident_Delete",
                            NormalizedName = "Resident_Delete"
                        },
                        new
                        {
                            Id = "53991596-ba24-44a3-977c-a44fbb48329b",
                            ConcurrencyStamp = "4",
                            Name = "Resident_DeleteMultiple",
                            NormalizedName = "Resident_DeleteMultiple"
                        },
                        new
                        {
                            Id = "92e6ac55-21aa-4d49-86b0-9a96781667e5",
                            ConcurrencyStamp = "4",
                            Name = "Resident_GetAll",
                            NormalizedName = "Resident_GetAll"
                        },
                        new
                        {
                            Id = "be7cbbda-4a16-4cc6-9f13-dd075e5c2e21",
                            ConcurrencyStamp = "4",
                            Name = "Resident_GetById",
                            NormalizedName = "Resident_GetById"
                        },
                        new
                        {
                            Id = "364b8e17-79b1-4fb4-984b-9dcdda185c03",
                            ConcurrencyStamp = "4",
                            Name = "Permission_Create",
                            NormalizedName = "Permission_Create"
                        },
                        new
                        {
                            Id = "b796cc77-edda-48e8-93ad-d47974f18ab2",
                            ConcurrencyStamp = "4",
                            Name = "Permission_Update",
                            NormalizedName = "Permission_Update"
                        },
                        new
                        {
                            Id = "27bb037f-6666-4026-940f-93f55c46628e",
                            ConcurrencyStamp = "4",
                            Name = "Permission_Delete",
                            NormalizedName = "Permission_Delete"
                        },
                        new
                        {
                            Id = "8091ee12-1cc5-4149-b07f-03fe3b7e6bb4",
                            ConcurrencyStamp = "4",
                            Name = "Permission_DeleteMultiple",
                            NormalizedName = "Permission_DeleteMultiple"
                        },
                        new
                        {
                            Id = "b996e3df-4e3f-4900-b353-e9fde3f1e799",
                            ConcurrencyStamp = "4",
                            Name = "Permission_GetAll",
                            NormalizedName = "Permission_GetAll"
                        },
                        new
                        {
                            Id = "e4791c51-afe4-4f20-9c27-1d7fc86ea9f6",
                            ConcurrencyStamp = "4",
                            Name = "Permission_GetById",
                            NormalizedName = "Permission_GetById"
                        },
                        new
                        {
                            Id = "23e3cb31-195b-493e-b519-19e8670a1c91",
                            ConcurrencyStamp = "4",
                            Name = "Customer_Create",
                            NormalizedName = "Customer_Create"
                        },
                        new
                        {
                            Id = "c4bd9a87-553b-49ca-b89c-5e5b9f6447e3",
                            ConcurrencyStamp = "4",
                            Name = "Customer_Update",
                            NormalizedName = "Customer_Update"
                        },
                        new
                        {
                            Id = "03c13cd6-8f3f-4bd8-84d4-bf3e8b8f32b0",
                            ConcurrencyStamp = "4",
                            Name = "Customer_Delete",
                            NormalizedName = "Customer_Delete"
                        },
                        new
                        {
                            Id = "53eb949b-da10-48fb-94c9-8c12b1f19f8b",
                            ConcurrencyStamp = "4",
                            Name = "Customer_DeleteMultiple",
                            NormalizedName = "Customer_DeleteMultiple"
                        },
                        new
                        {
                            Id = "7aebfa1f-f954-46e0-9da7-fe12a350e5f8",
                            ConcurrencyStamp = "4",
                            Name = "Customer_GetAll",
                            NormalizedName = "Customer_GetAll"
                        },
                        new
                        {
                            Id = "bd35e4d5-9482-47ad-99af-e52e86724a74",
                            ConcurrencyStamp = "4",
                            Name = "Customer_GetById",
                            NormalizedName = "Customer_GetById"
                        },
                        new
                        {
                            Id = "159d4c47-ec30-4907-959a-d7def1372773",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_Create",
                            NormalizedName = "UrbanArea_Create"
                        },
                        new
                        {
                            Id = "307b977b-cd18-48a8-8b89-fa2fc88c77a0",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_Update",
                            NormalizedName = "UrbanArea_Update"
                        },
                        new
                        {
                            Id = "93b811e0-c65d-4c83-b5f9-6cb43303cee3",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_Delete",
                            NormalizedName = "UrbanArea_Delete"
                        },
                        new
                        {
                            Id = "c3b0ee53-ab45-450e-8bfb-60953804f16f",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_DeleteMultiple",
                            NormalizedName = "UrbanArea_DeleteMultiple"
                        },
                        new
                        {
                            Id = "a5fc8d20-4bf6-4292-934f-5a96a2351be7",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_GetAll",
                            NormalizedName = "UrbanArea_GetAll"
                        },
                        new
                        {
                            Id = "d2f6fc92-5d1b-4dba-b136-39bc95e0bf7c",
                            ConcurrencyStamp = "4",
                            Name = "UrbanArea_GetById",
                            NormalizedName = "UrbanArea_GetById"
                        },
                        new
                        {
                            Id = "b50f4742-fc26-4092-8ced-46c5144e06ef",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_Create",
                            NormalizedName = "BuildingCategorie_Create"
                        },
                        new
                        {
                            Id = "1a477cfa-e3c7-4c73-b8c5-9d187c9f240b",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_Update",
                            NormalizedName = "BuildingCategorie_Update"
                        },
                        new
                        {
                            Id = "321b29f8-91cb-4194-8a11-1406374594c0",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_Delete",
                            NormalizedName = "BuildingCategorie_Delete"
                        },
                        new
                        {
                            Id = "39f202d1-e442-46fe-a85e-57b807dc162c",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_DeleteMultiple",
                            NormalizedName = "BuildingCategorie_DeleteMultiple"
                        },
                        new
                        {
                            Id = "9c2f94a8-4650-4a5a-ab0c-3beafc15a4a9",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_GetAll",
                            NormalizedName = "BuildingCategorie_GetAll"
                        },
                        new
                        {
                            Id = "25009734-3094-48c4-8150-aa279d38a954",
                            ConcurrencyStamp = "4",
                            Name = "BuildingCategorie_GetById",
                            NormalizedName = "BuildingCategorie_GetById"
                        },
                        new
                        {
                            Id = "cc07a342-479d-4f8e-a555-a332b4596af8",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_Create",
                            NormalizedName = "Addresse_Create"
                        },
                        new
                        {
                            Id = "16034e4e-685c-4f40-9f01-ddc06d245904",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_Update",
                            NormalizedName = "Addresse_Update"
                        },
                        new
                        {
                            Id = "19d45667-c182-4da8-8220-cf8e3f85f8f0",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_Delete",
                            NormalizedName = "Addresse_Delete"
                        },
                        new
                        {
                            Id = "7e6a81a8-d9ec-4306-aeea-ad498f64877b",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_DeleteMultiple",
                            NormalizedName = "Addresse_DeleteMultiple"
                        },
                        new
                        {
                            Id = "a3e0e643-25f9-4ac7-a863-09dea42c38ff",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_GetAll",
                            NormalizedName = "Addresse_GetAll"
                        },
                        new
                        {
                            Id = "2277733f-dfa5-43e9-8f2a-23175532840f",
                            ConcurrencyStamp = "4",
                            Name = "Addresse_GetById",
                            NormalizedName = "Addresse_GetById"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthenticationProject.Models.Apartment", b =>
                {
                    b.HasOne("AuthenticationProject.Models.BuildingCategory", "BuildingCategory")
                        .WithMany("Apartments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingCategory");
                });

            modelBuilder.Entity("AuthenticationProject.Models.BuildingCategory", b =>
                {
                    b.HasOne("AuthenticationProject.Models.Address", "Address")
                        .WithMany("buildingCategories")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AuthenticationProject.Models.PermissionRole", b =>
                {
                    b.HasOne("AuthenticationProject.Models.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthenticationProject.Models.PermissionUser", b =>
                {
                    b.HasOne("AuthenticationProject.Models.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId");

                    b.HasOne("AuthenticationProject.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationProject.Models.ResidentApartment", b =>
                {
                    b.HasOne("AuthenticationProject.Models.Apartment", "Apartment")
                        .WithMany("ResidentApartments")
                        .HasForeignKey("ApartmentId");

                    b.HasOne("AuthenticationProject.Models.Resident", "Resident")
                        .WithMany("ResidentApartments")
                        .HasForeignKey("ResidentId");

                    b.Navigation("Apartment");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthenticationProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthenticationProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthenticationProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationProject.Models.Address", b =>
                {
                    b.Navigation("buildingCategories");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Apartment", b =>
                {
                    b.Navigation("ResidentApartments");
                });

            modelBuilder.Entity("AuthenticationProject.Models.BuildingCategory", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Permission", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("PermissionUsers");
                });

            modelBuilder.Entity("AuthenticationProject.Models.Resident", b =>
                {
                    b.Navigation("ResidentApartments");
                });
#pragma warning restore 612, 618
        }
    }
}
